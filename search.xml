<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[promise剖析]]></title>
    <url>%2F2021%2F06%2F25%2Fpromise%E5%89%96%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、定义promise是js异步的一种解决方案 1. js为什么要实现异步js代码首先是单线程执行，即同步执行，正常来讲是在一个线程上有一个执行栈，全局/函数/eval执行上下文根据调用依次压入栈中，执行完后从栈中弹出，先进后出。如果碰到I/O任务，响应会比较慢，这样就会导致以下的问题： 造成网页卡死，因为js引擎线程和GUI渲染线程是互斥的，js任务队列没有执行完毕，GUI渲染线程一直被挂起 这时候CPU往往是闲着的，浪费了资源那么为了解决上述问题，就需要js实现异步来解决阻塞问题，将一些需要等待响应的任务作为异步任务，放入任务队列，等待执行栈中的当前任务执行完后，将任务队列推入主线程，依次执行任务队列中的任务。 2. 解决方案是怎样的3. 还有什么解决方案，它们的区别4. 自己实现一种方案什么是单线程语言？浏览器架构浏览器是多进程架构，一个tab网页即一个进程，各个tag网页间互不干扰，完全独立。每打开一个tab网页，浏览器就会为该网页分配独立的渲染引擎实例。 渲染引擎（浏览器内核）渲染引擎即浏览器内核是多线程的，在内核的控制下各线程相互配合以保持同步，这些线程主要包括： GUI渲染线程 负责渲染HTML元素，当页面需要重绘repaint/回流reflow时，该线程就会执行。 JavaScript引擎线程 负责解析js脚本，运行代码，我们常说的V8引擎就是一个js引擎。 定时触发器线程 setTimeout、setInterval等待时间结束后把执行函数堆入任务队列中 事件触发线程 将click、mouse等交互事件发生后将这些事件放入事件队列中 异步http请求线程 处理用户的get、post等请求，等返回结果后将回调函数堆入任务队列 总结从以上内容可以看出，js代码是被一个js引擎线程来解析执行，即单线程执行，所以说js是单线程语言 为什么是单线程语言这主要是因为js脚本的作用是处理用户的交互，操作dom，如果做成来多线程的话，一旦dom操作达到临界资源，开启了一个新的线程来执行，而两个线程分别是修改和删除同一个dom，就会出现问题（该问题可以通过锁来解决，但是可能会造成其他的问题，大大增加复杂性）。 如何实现多线程为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。 GUI渲染线程和JS引擎线程是互斥的]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用echarts构建自旋转的3D地球]]></title>
    <url>%2F2020%2F04%2F11%2F%E5%88%A9%E7%94%A8echarts%E6%9E%84%E5%BB%BA%E8%87%AA%E6%97%8B%E8%BD%AC%E7%9A%843D%E5%9C%B0%E7%90%83%2F</url>
    <content type="text"><![CDATA[1、引入js文件及准备素材js文件及素材下载参照官网https://echarts.baidu.com/download.html素材已上传至https://github.com/i1520/echarts3DEarth123&lt;script src="../js/lib/echarts.min.js"&gt;&lt;/script&gt;&lt;script src="../js/lib/echarts-gl.min.js"&gt;&lt;/script&gt;&lt;script src="../js/lib/world.js"&gt;&lt;/script&gt; 所需素材：world.jpg、starfield.jpg、pisa.hdr 2、配置option1234567891011121314151617181920212223242526 option = &#123; backgroundColor: "#000", globe:&#123; baseTexture: "../img/world.jpg", heightTexture: "../img/world.jpg", displacementScale: 0.04, environment: "../img/starfield.jpg", shading:"realistic", realisticMaterial: &#123; roughness: 0.9 &#125;, postEffect: &#123; enable: true &#125;, light: &#123; main: &#123; intensity: 5, shadow: true &#125;, ambientCubemap: &#123; texture: "../img/pisa.hdr", diffuseIntensity: 0.2 &#125; &#125; &#125;&#125;; 3、全部代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="earth" style="width: 100%; height: 600px"&gt;&lt;/div&gt; &lt;script src="../js/lib/echarts.min.js"&gt;&lt;/script&gt; &lt;script src="../js/lib/echarts-gl.min.js"&gt;&lt;/script&gt; &lt;script src="../js/lib/world.js"&gt;&lt;/script&gt; &lt;script&gt; var dom = document.getElementById("earth") var myChart = echarts.init(dom); option = &#123; backgroundColor: "#000", globe:&#123; baseTexture: "../img/world.jpg", heightTexture: "../img/world.jpg", displacementScale: 0.04, environment: "../img/starfield.jpg", shading:"realistic", realisticMaterial: &#123; roughness: 0.9 &#125;, postEffect: &#123; enable: true &#125;, light: &#123; main: &#123; intensity: 5, shadow: true &#125;, ambientCubemap: &#123; texture: "../img/pisa.hdr", diffuseIntensity: 0.2 &#125; &#125; &#125; &#125;; if (option &amp;&amp; typeof option === "object") &#123; myChart.setOption(option, true); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 4、效果如下：]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客现有功能及后续功能设计]]></title>
    <url>%2F2019%2F07%2F17%2F%E5%8D%9A%E5%AE%A2%E7%8E%B0%E6%9C%89%E5%8A%9F%E8%83%BD%E5%8F%8A%E5%90%8E%E7%BB%AD%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[忙活了三天，总算把我的个人博客搭建起来了，开心～这个博客主要是将我参与开发的一些项目和积累到的技术经验分享出来，供广大深爱前端技术或者是热爱编程的小伙伴们来参考和借鉴。主要分为四大版块： 一、项目分享二、技术总结三、个人介绍四、联系合作]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown概述]]></title>
    <url>%2F2019%2F07%2F15%2FMarkdown%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[定义：&emsp;&emsp;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它的语法简单明了、学习容易，而且功能比纯文本更强，因此很多人用它来写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。&emsp;&emsp;用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。&emsp;&emsp;除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。 语法1. 文本样式斜体：*xxx* 或 _xxx_ =&gt; xxx粗体：**xxx** =&gt; =&gt; xx加粗斜体：***xxx*** =&gt; xxx删除线：~~xxx~~ =&gt; xxx加粗斜体删除线：***~~xxx~~*** =&gt; xxx 2.分级标题# 一级标题 =&gt; 一级标题## 二级标题 =&gt; 二级标题### 三级标题 =&gt; 三级标题#### 四级标题 =&gt; 四级标题##### 五级标题 =&gt; 五级标题###### 六级标题 =&gt; 六级标题3. 超链接行内形式：[content](url “title”)例：[我的博客](https://ray-dai.github.io/ “点击打开我的博客”)=&gt;我的博客 参数形式：[content][name]&emsp;&emsp;&emsp;&emsp;&emsp;[name]: url “title”例：[我的博客][1]有一个很好的平台-[简书][2][1]:https://rai-dai.github.io/[2]:http://www.jianshu.com/=&gt;[我的博客][1]有一个很好的平台-[简书][2][1]:https://rai-dai.github.io/[2]:http://www.jianshu.com/ 自动链接： &lt; url &gt;例子：我的博客地址 https://ray-dai.github.io/ 4. 列表无序列表：* xxx =&gt; • xxx+ xxx =&gt; • xxx- xxx =&gt; • xxx 有序列表：1.xxx =&gt; 1.xxx2.xxx =&gt; 2.xxx3.xxx =&gt; 3.xxx 5. 插入图片、视频、音乐插入图片在 Hexo 中插入图片，首先需要将图片放在 source/images/ 文件夹下，然后如下方式进行插入: ![title](src)例：如果要设置图片尺寸或居左/中/右，可以如下设置：&lt; img src=”/images/kind.jpeg” width = “100” height = “100” div align=center /&gt;效果如下： 插入视频&lt; video src=”/media/demo.mp4” width=”320” height=”180” controls=”controls”&gt;&lt; /video&gt;效果如下： 插入音频&lt; audio src=”/media/穿越时空的思念.mp3” controls autoplay&gt;&emsp;&emsp;您的浏览器暂时不支持音频&lt; /audio&gt;效果如下： 您的浏览器暂时不支持音频 var ap = new APlayer({ element: document.getElementById("aplayer-utMEiUUf"), narrow: false, autoplay: true, showlrc: false, music: { title: "穿越时空的思念", author: "和田薰", url: "/media/穿越时空的思念.mp3", pic: "/images/kind.jpeg", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 6. 表格表头1|表头2|表头3|表头4-| :- | :-: | -:默认左对齐|左对齐|居中对其|右对齐|默认左对齐|左对齐|居中对其|右对齐|默认左对齐|左对齐|居中对其|右对齐| =&gt; 表头1 表头2 表头3 表头4 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 默认左对齐 左对齐 居中对其 右对齐 7. 待办事宜- [ ] 个人博客创建 &emsp;- [x] xxx &emsp;- [x] xxx &emsp;&emsp;- [ ] xxx 参考链接=&gt; 个人博客创建 主题选择 背景音乐 站内搜索 日历组件添加 文章评论留言 在线聊天 百度统计 项目展示 技术文章 个人简历 联系合作 优化 SEO 参考链接 动画效果 其它… 个人网站开发 了解域名和IP 了解服务器和数据库 学习后端语言和数据库语言 配置服务器和数据库，域名备案解析 前端构建，页面开发 网站上线 个人网店创办 申请网店账号 了解网店创办流程 熟悉相关操作和软件 布置店面 寻找货源 安排客服 模拟交易流程 货物上架 网店开张 其它… 8. 代码块1234let a = 123 let b = 456 let c = a + b console.log(c)]]></content>
      <categories>
        <category>commons</category>
      </categories>
      <tags>
        <tag>第一篇，练习，熟悉markdown</tag>
      </tags>
  </entry>
</search>
